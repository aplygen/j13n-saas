/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.core.tables;


import io.j13n.core.jooq.core.Core;
import io.j13n.core.jooq.core.Keys;
import io.j13n.core.jooq.core.tables.CoreAuthorities.CoreAuthoritiesPath;
import io.j13n.core.jooq.core.tables.CoreUsers.CoreUsersPath;
import io.j13n.core.jooq.core.tables.records.CoreUserAuthoritiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreUserAuthorities extends TableImpl<CoreUserAuthoritiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_user_authorities</code>
     */
    public static final CoreUserAuthorities CORE_USER_AUTHORITIES = new CoreUserAuthorities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreUserAuthoritiesRecord> getRecordType() {
        return CoreUserAuthoritiesRecord.class;
    }

    /**
     * The column <code>core.core_user_authorities.id</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("core.core_next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.core_user_authorities.user_id</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_user_authorities.authority_id</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, Long> AUTHORITY_ID = createField(DSL.name("authority_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_user_authorities.created_at</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_user_authorities.created_by</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_user_authorities.updated_at</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_user_authorities.updated_by</code>.
     */
    public final TableField<CoreUserAuthoritiesRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    private CoreUserAuthorities(Name alias, Table<CoreUserAuthoritiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CoreUserAuthorities(Name alias, Table<CoreUserAuthoritiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.core_user_authorities</code> table reference
     */
    public CoreUserAuthorities(String alias) {
        this(DSL.name(alias), CORE_USER_AUTHORITIES);
    }

    /**
     * Create an aliased <code>core.core_user_authorities</code> table reference
     */
    public CoreUserAuthorities(Name alias) {
        this(alias, CORE_USER_AUTHORITIES);
    }

    /**
     * Create a <code>core.core_user_authorities</code> table reference
     */
    public CoreUserAuthorities() {
        this(DSL.name("core_user_authorities"), null);
    }

    public <O extends Record> CoreUserAuthorities(Table<O> path, ForeignKey<O, CoreUserAuthoritiesRecord> childPath, InverseForeignKey<O, CoreUserAuthoritiesRecord> parentPath) {
        super(path, childPath, parentPath, CORE_USER_AUTHORITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoreUserAuthoritiesPath extends CoreUserAuthorities implements Path<CoreUserAuthoritiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoreUserAuthoritiesPath(Table<O> path, ForeignKey<O, CoreUserAuthoritiesRecord> childPath, InverseForeignKey<O, CoreUserAuthoritiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoreUserAuthoritiesPath(Name alias, Table<CoreUserAuthoritiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoreUserAuthoritiesPath as(String alias) {
            return new CoreUserAuthoritiesPath(DSL.name(alias), this);
        }

        @Override
        public CoreUserAuthoritiesPath as(Name alias) {
            return new CoreUserAuthoritiesPath(alias, this);
        }

        @Override
        public CoreUserAuthoritiesPath as(Table<?> alias) {
            return new CoreUserAuthoritiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public UniqueKey<CoreUserAuthoritiesRecord> getPrimaryKey() {
        return Keys.CORE_USER_AUTHORITIES_PKEY;
    }

    @Override
    public List<ForeignKey<CoreUserAuthoritiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_AUTHORITY_ID_FKEY, Keys.CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_USER_ID_FKEY);
    }

    private transient CoreAuthoritiesPath _coreAuthorities;

    /**
     * Get the implicit join path to the <code>core.core_authorities</code>
     * table.
     */
    public CoreAuthoritiesPath coreAuthorities() {
        if (_coreAuthorities == null)
            _coreAuthorities = new CoreAuthoritiesPath(this, Keys.CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_AUTHORITY_ID_FKEY, null);

        return _coreAuthorities;
    }

    private transient CoreUsersPath _coreUsers;

    /**
     * Get the implicit join path to the <code>core.core_users</code> table.
     */
    public CoreUsersPath coreUsers() {
        if (_coreUsers == null)
            _coreUsers = new CoreUsersPath(this, Keys.CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_USER_ID_FKEY, null);

        return _coreUsers;
    }

    @Override
    public CoreUserAuthorities as(String alias) {
        return new CoreUserAuthorities(DSL.name(alias), this);
    }

    @Override
    public CoreUserAuthorities as(Name alias) {
        return new CoreUserAuthorities(alias, this);
    }

    @Override
    public CoreUserAuthorities as(Table<?> alias) {
        return new CoreUserAuthorities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserAuthorities rename(String name) {
        return new CoreUserAuthorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserAuthorities rename(Name name) {
        return new CoreUserAuthorities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserAuthorities rename(Table<?> name) {
        return new CoreUserAuthorities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities where(Condition condition) {
        return new CoreUserAuthorities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserAuthorities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserAuthorities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserAuthorities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserAuthorities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserAuthorities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
