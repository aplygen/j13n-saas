/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.core.tables.records;


import io.j13n.core.jooq.core.tables.CoreUserAuthorities;

import java.time.LocalDateTime;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreUserAuthoritiesRecord extends UpdatableRecordImpl<CoreUserAuthoritiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>core.core_user_authorities.id</code>.
     */
    public CoreUserAuthoritiesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>core.core_user_authorities.user_id</code>.
     */
    public CoreUserAuthoritiesRecord setUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>core.core_user_authorities.authority_id</code>.
     */
    public CoreUserAuthoritiesRecord setAuthorityId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.authority_id</code>.
     */
    public Long getAuthorityId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>core.core_user_authorities.created_at</code>.
     */
    public CoreUserAuthoritiesRecord setCreatedAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>core.core_user_authorities.created_by</code>.
     */
    public CoreUserAuthoritiesRecord setCreatedBy(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.created_by</code>.
     */
    public Long getCreatedBy() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>core.core_user_authorities.updated_at</code>.
     */
    public CoreUserAuthoritiesRecord setUpdatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>core.core_user_authorities.updated_by</code>.
     */
    public CoreUserAuthoritiesRecord setUpdatedBy(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>core.core_user_authorities.updated_by</code>.
     */
    public Long getUpdatedBy() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreUserAuthoritiesRecord
     */
    public CoreUserAuthoritiesRecord() {
        super(CoreUserAuthorities.CORE_USER_AUTHORITIES);
    }

    /**
     * Create a detached, initialised CoreUserAuthoritiesRecord
     */
    public CoreUserAuthoritiesRecord(Long id, Long userId, Long authorityId, LocalDateTime createdAt, Long createdBy, LocalDateTime updatedAt, Long updatedBy) {
        super(CoreUserAuthorities.CORE_USER_AUTHORITIES);

        setId(id);
        setUserId(userId);
        setAuthorityId(authorityId);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetTouchedOnNotNull();
    }
}
