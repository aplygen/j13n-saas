/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.tables;


import io.j13n.core.enums.FileResourceType;
import io.j13n.core.enums.FileSystemType;
import io.j13n.core.jooq.Core;
import io.j13n.core.jooq.Indexes;
import io.j13n.core.jooq.Keys;
import io.j13n.core.jooq.tables.CoreFileSystem.CoreFileSystemPath;
import io.j13n.core.jooq.tables.CoreUsers.CoreUsersPath;
import io.j13n.core.jooq.tables.records.CoreFileSystemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreFileSystem extends TableImpl<CoreFileSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_file_system</code>
     */
    public static final CoreFileSystem CORE_FILE_SYSTEM = new CoreFileSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreFileSystemRecord> getRecordType() {
        return CoreFileSystemRecord.class;
    }

    /**
     * The column <code>core.core_file_system.id</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("core.next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.core_file_system.file_resource_type</code>.
     */
    public final TableField<CoreFileSystemRecord, FileResourceType> FILE_RESOURCE_TYPE = createField(DSL.name("file_resource_type"), DefaultDataType.getDefaultDataType("\"public\".\"file_resource_type\"").nullable(false).defaultValue(DSL.field(DSL.raw("'STATIC'::file_resource_type"), org.jooq.impl.SQLDataType.OTHER)), this, "", new EnumConverter<Object, FileResourceType>(Object.class, FileResourceType.class));

    /**
     * The column <code>core.core_file_system.code</code>.
     */
    public final TableField<CoreFileSystemRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(8).nullable(false), this, "");

    /**
     * The column <code>core.core_file_system.name</code>.
     */
    public final TableField<CoreFileSystemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>core.core_file_system.file_system_type</code>.
     */
    public final TableField<CoreFileSystemRecord, FileSystemType> FILE_SYSTEM_TYPE = createField(DSL.name("file_system_type"), DefaultDataType.getDefaultDataType("\"public\".\"file_system_type\"").nullable(false).defaultValue(DSL.field(DSL.raw("'FILE'::file_system_type"), org.jooq.impl.SQLDataType.OTHER)), this, "", new EnumConverter<Object, FileSystemType>(Object.class, FileSystemType.class));

    /**
     * The column <code>core.core_file_system.size</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_file_system.parent_id</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_file_system.user_id</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_file_system.created_by</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_file_system.created_at</code>.
     */
    public final TableField<CoreFileSystemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_file_system.updated_by</code>.
     */
    public final TableField<CoreFileSystemRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_file_system.updated_at</code>.
     */
    public final TableField<CoreFileSystemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CoreFileSystem(Name alias, Table<CoreFileSystemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CoreFileSystem(Name alias, Table<CoreFileSystemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.core_file_system</code> table reference
     */
    public CoreFileSystem(String alias) {
        this(DSL.name(alias), CORE_FILE_SYSTEM);
    }

    /**
     * Create an aliased <code>core.core_file_system</code> table reference
     */
    public CoreFileSystem(Name alias) {
        this(alias, CORE_FILE_SYSTEM);
    }

    /**
     * Create a <code>core.core_file_system</code> table reference
     */
    public CoreFileSystem() {
        this(DSL.name("core_file_system"), null);
    }

    public <O extends Record> CoreFileSystem(Table<O> path, ForeignKey<O, CoreFileSystemRecord> childPath, InverseForeignKey<O, CoreFileSystemRecord> parentPath) {
        super(path, childPath, parentPath, CORE_FILE_SYSTEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoreFileSystemPath extends CoreFileSystem implements Path<CoreFileSystemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoreFileSystemPath(Table<O> path, ForeignKey<O, CoreFileSystemRecord> childPath, InverseForeignKey<O, CoreFileSystemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoreFileSystemPath(Name alias, Table<CoreFileSystemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoreFileSystemPath as(String alias) {
            return new CoreFileSystemPath(DSL.name(alias), this);
        }

        @Override
        public CoreFileSystemPath as(Name alias) {
            return new CoreFileSystemPath(alias, this);
        }

        @Override
        public CoreFileSystemPath as(Table<?> alias) {
            return new CoreFileSystemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FILE_SYSTEM_CODE_FILE_RESOURCE_TYPE_FILE_SYSTEM_TYPE, Indexes.IDX_FILE_SYSTEM_CODE_NAME, Indexes.IDX_FILE_SYSTEM_FILE_RESOURCE_TYPE_FILE_SYSTEM_TYPE_PARENT_ID, Indexes.IDX_FILE_SYSTEM_USER_ID);
    }

    @Override
    public UniqueKey<CoreFileSystemRecord> getPrimaryKey() {
        return Keys.CORE_FILE_SYSTEM_PKEY;
    }

    @Override
    public List<ForeignKey<CoreFileSystemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_PARENT_ID_FKEY, Keys.CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_USER_ID_FKEY);
    }

    private transient CoreFileSystemPath _coreFileSystem;

    /**
     * Get the implicit join path to the <code>core.core_file_system</code>
     * table.
     */
    public CoreFileSystemPath coreFileSystem() {
        if (_coreFileSystem == null)
            _coreFileSystem = new CoreFileSystemPath(this, Keys.CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_PARENT_ID_FKEY, null);

        return _coreFileSystem;
    }

    private transient CoreUsersPath _coreUsers;

    /**
     * Get the implicit join path to the <code>core.core_users</code> table.
     */
    public CoreUsersPath coreUsers() {
        if (_coreUsers == null)
            _coreUsers = new CoreUsersPath(this, Keys.CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_USER_ID_FKEY, null);

        return _coreUsers;
    }

    @Override
    public CoreFileSystem as(String alias) {
        return new CoreFileSystem(DSL.name(alias), this);
    }

    @Override
    public CoreFileSystem as(Name alias) {
        return new CoreFileSystem(alias, this);
    }

    @Override
    public CoreFileSystem as(Table<?> alias) {
        return new CoreFileSystem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileSystem rename(String name) {
        return new CoreFileSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileSystem rename(Name name) {
        return new CoreFileSystem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileSystem rename(Table<?> name) {
        return new CoreFileSystem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem where(Condition condition) {
        return new CoreFileSystem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreFileSystem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreFileSystem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreFileSystem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreFileSystem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreFileSystem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
