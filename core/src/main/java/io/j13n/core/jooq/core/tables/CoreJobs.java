/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.core.tables;


import io.j13n.core.jooq.core.Core;
import io.j13n.core.jooq.core.Indexes;
import io.j13n.core.jooq.core.Keys;
import io.j13n.core.jooq.core.tables.CoreUsers.CoreUsersPath;
import io.j13n.core.jooq.core.tables.records.CoreJobsRecord;
import io.j13n.core.jooq.public_.enums.CoreJobStatus;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreJobs extends TableImpl<CoreJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_jobs</code>
     */
    public static final CoreJobs CORE_JOBS = new CoreJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreJobsRecord> getRecordType() {
        return CoreJobsRecord.class;
    }

    /**
     * The column <code>core.core_jobs.id</code>.
     */
    public final TableField<CoreJobsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("core.core_next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.core_jobs.user_id</code>.
     */
    public final TableField<CoreJobsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_jobs.title</code>.
     */
    public final TableField<CoreJobsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>core.core_jobs.company</code>.
     */
    public final TableField<CoreJobsRecord, String> COMPANY = createField(DSL.name("company"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>core.core_jobs.location</code>.
     */
    public final TableField<CoreJobsRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>core.core_jobs.description</code>.
     */
    public final TableField<CoreJobsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_jobs.application_url</code>.
     */
    public final TableField<CoreJobsRecord, String> APPLICATION_URL = createField(DSL.name("application_url"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>core.core_jobs.source</code>.
     */
    public final TableField<CoreJobsRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>core.core_jobs.posted_date</code>.
     */
    public final TableField<CoreJobsRecord, LocalDateTime> POSTED_DATE = createField(DSL.name("posted_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.core_jobs.is_remote</code>.
     */
    public final TableField<CoreJobsRecord, Boolean> IS_REMOTE = createField(DSL.name("is_remote"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>core.core_jobs.status</code>.
     */
    public final TableField<CoreJobsRecord, CoreJobStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'IN_SEARCH'::core_job_status"), SQLDataType.VARCHAR)).asEnumDataType(CoreJobStatus.class), this, "");

    /**
     * The column <code>core.core_jobs.created_by</code>.
     */
    public final TableField<CoreJobsRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_jobs.created_at</code>.
     */
    public final TableField<CoreJobsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_jobs.updated_by</code>.
     */
    public final TableField<CoreJobsRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_jobs.updated_at</code>.
     */
    public final TableField<CoreJobsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CoreJobs(Name alias, Table<CoreJobsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CoreJobs(Name alias, Table<CoreJobsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.core_jobs</code> table reference
     */
    public CoreJobs(String alias) {
        this(DSL.name(alias), CORE_JOBS);
    }

    /**
     * Create an aliased <code>core.core_jobs</code> table reference
     */
    public CoreJobs(Name alias) {
        this(alias, CORE_JOBS);
    }

    /**
     * Create a <code>core.core_jobs</code> table reference
     */
    public CoreJobs() {
        this(DSL.name("core_jobs"), null);
    }

    public <O extends Record> CoreJobs(Table<O> path, ForeignKey<O, CoreJobsRecord> childPath, InverseForeignKey<O, CoreJobsRecord> parentPath) {
        super(path, childPath, parentPath, CORE_JOBS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoreJobsPath extends CoreJobs implements Path<CoreJobsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoreJobsPath(Table<O> path, ForeignKey<O, CoreJobsRecord> childPath, InverseForeignKey<O, CoreJobsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoreJobsPath(Name alias, Table<CoreJobsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoreJobsPath as(String alias) {
            return new CoreJobsPath(DSL.name(alias), this);
        }

        @Override
        public CoreJobsPath as(Name alias) {
            return new CoreJobsPath(alias, this);
        }

        @Override
        public CoreJobsPath as(Table<?> alias) {
            return new CoreJobsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_JOBS_COMPANY, Indexes.IDX_JOBS_DATE, Indexes.IDX_JOBS_SOURCE, Indexes.IDX_JOBS_STATUS);
    }

    @Override
    public UniqueKey<CoreJobsRecord> getPrimaryKey() {
        return Keys.CORE_JOBS_PKEY;
    }

    @Override
    public List<ForeignKey<CoreJobsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_JOBS__FK_JOB_SEARCH_RESULTS_USER_ID_USERS_ID);
    }

    private transient CoreUsersPath _coreUsers;

    /**
     * Get the implicit join path to the <code>core.core_users</code> table.
     */
    public CoreUsersPath coreUsers() {
        if (_coreUsers == null)
            _coreUsers = new CoreUsersPath(this, Keys.CORE_JOBS__FK_JOB_SEARCH_RESULTS_USER_ID_USERS_ID, null);

        return _coreUsers;
    }

    @Override
    public CoreJobs as(String alias) {
        return new CoreJobs(DSL.name(alias), this);
    }

    @Override
    public CoreJobs as(Name alias) {
        return new CoreJobs(alias, this);
    }

    @Override
    public CoreJobs as(Table<?> alias) {
        return new CoreJobs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreJobs rename(String name) {
        return new CoreJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreJobs rename(Name name) {
        return new CoreJobs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreJobs rename(Table<?> name) {
        return new CoreJobs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs where(Condition condition) {
        return new CoreJobs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreJobs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreJobs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreJobs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreJobs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreJobs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
