/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.core.tables;


import io.j13n.core.enums.JobStatus;
import io.j13n.core.jooq.core.Core;
import io.j13n.core.jooq.core.Indexes;
import io.j13n.core.jooq.core.Keys;
import io.j13n.core.jooq.core.tables.CoreJobs.CoreJobsPath;
import io.j13n.core.jooq.core.tables.CoreUsers.CoreUsersPath;
import io.j13n.core.jooq.core.tables.records.CoreUserJobsRecord;
import io.j13n.core.jooq.public_.enums.CoreJobStatus;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreUserJobs extends TableImpl<CoreUserJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_user_jobs</code>
     */
    public static final CoreUserJobs CORE_USER_JOBS = new CoreUserJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreUserJobsRecord> getRecordType() {
        return CoreUserJobsRecord.class;
    }

    /**
     * The column <code>core.core_user_jobs.id</code>.
     */
    public final TableField<CoreUserJobsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("core.core_next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.core_user_jobs.user_id</code>.
     */
    public final TableField<CoreUserJobsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_user_jobs.job_id</code>.
     */
    public final TableField<CoreUserJobsRecord, Long> JOB_ID = createField(DSL.name("job_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>core.core_user_jobs.job_status</code>.
     */
    public final TableField<CoreUserJobsRecord, JobStatus> JOB_STATUS = createField(DSL.name("job_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'IN_PROGRESS'::core_job_status"), SQLDataType.VARCHAR)).asEnumDataType(CoreJobStatus.class), this, "", new EnumConverter<CoreJobStatus, JobStatus>(CoreJobStatus.class, JobStatus.class));

    /**
     * The column <code>core.core_user_jobs.applied_date</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> APPLIED_DATE = createField(DSL.name("applied_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.core_user_jobs.application_notes</code>.
     */
    public final TableField<CoreUserJobsRecord, String> APPLICATION_NOTES = createField(DSL.name("application_notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.recruiter_name</code>.
     */
    public final TableField<CoreUserJobsRecord, String> RECRUITER_NAME = createField(DSL.name("recruiter_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>core.core_user_jobs.recruiter_email</code>.
     */
    public final TableField<CoreUserJobsRecord, String> RECRUITER_EMAIL = createField(DSL.name("recruiter_email"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>core.core_user_jobs.recruiter_dial_code</code>.
     */
    public final TableField<CoreUserJobsRecord, Short> RECRUITER_DIAL_CODE = createField(DSL.name("recruiter_dial_code"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("91"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>core.core_user_jobs.recruiter_phone_number</code>.
     */
    public final TableField<CoreUserJobsRecord, String> RECRUITER_PHONE_NUMBER = createField(DSL.name("recruiter_phone_number"), SQLDataType.CHAR(15), this, "");

    /**
     * The column <code>core.core_user_jobs.interview_notes</code>.
     */
    public final TableField<CoreUserJobsRecord, String> INTERVIEW_NOTES = createField(DSL.name("interview_notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.next_interview_date</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> NEXT_INTERVIEW_DATE = createField(DSL.name("next_interview_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.core_user_jobs.salary_range</code>.
     */
    public final TableField<CoreUserJobsRecord, String> SALARY_RANGE = createField(DSL.name("salary_range"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.core_user_jobs.benefits</code>.
     */
    public final TableField<CoreUserJobsRecord, String> BENEFITS = createField(DSL.name("benefits"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.rejection_reason</code>.
     */
    public final TableField<CoreUserJobsRecord, String> REJECTION_REASON = createField(DSL.name("rejection_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.rejection_date</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> REJECTION_DATE = createField(DSL.name("rejection_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.core_user_jobs.offer_details</code>.
     */
    public final TableField<CoreUserJobsRecord, String> OFFER_DETAILS = createField(DSL.name("offer_details"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.offer_date</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> OFFER_DATE = createField(DSL.name("offer_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.core_user_jobs.negotiation_notes</code>.
     */
    public final TableField<CoreUserJobsRecord, String> NEGOTIATION_NOTES = createField(DSL.name("negotiation_notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>core.core_user_jobs.created_by</code>.
     */
    public final TableField<CoreUserJobsRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_user_jobs.created_at</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_user_jobs.updated_by</code>.
     */
    public final TableField<CoreUserJobsRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_user_jobs.updated_at</code>.
     */
    public final TableField<CoreUserJobsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CoreUserJobs(Name alias, Table<CoreUserJobsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CoreUserJobs(Name alias, Table<CoreUserJobsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.core_user_jobs</code> table reference
     */
    public CoreUserJobs(String alias) {
        this(DSL.name(alias), CORE_USER_JOBS);
    }

    /**
     * Create an aliased <code>core.core_user_jobs</code> table reference
     */
    public CoreUserJobs(Name alias) {
        this(alias, CORE_USER_JOBS);
    }

    /**
     * Create a <code>core.core_user_jobs</code> table reference
     */
    public CoreUserJobs() {
        this(DSL.name("core_user_jobs"), null);
    }

    public <O extends Record> CoreUserJobs(Table<O> path, ForeignKey<O, CoreUserJobsRecord> childPath, InverseForeignKey<O, CoreUserJobsRecord> parentPath) {
        super(path, childPath, parentPath, CORE_USER_JOBS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoreUserJobsPath extends CoreUserJobs implements Path<CoreUserJobsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoreUserJobsPath(Table<O> path, ForeignKey<O, CoreUserJobsRecord> childPath, InverseForeignKey<O, CoreUserJobsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoreUserJobsPath(Name alias, Table<CoreUserJobsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoreUserJobsPath as(String alias) {
            return new CoreUserJobsPath(DSL.name(alias), this);
        }

        @Override
        public CoreUserJobsPath as(Name alias) {
            return new CoreUserJobsPath(alias, this);
        }

        @Override
        public CoreUserJobsPath as(Table<?> alias) {
            return new CoreUserJobsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX1_USER_JOBS_USER_ID, Indexes.IDX2_USER_JOBS_JOB_ID, Indexes.IDX3_USER_JOBS_JOB_STATUS);
    }

    @Override
    public UniqueKey<CoreUserJobsRecord> getPrimaryKey() {
        return Keys.CORE_USER_JOBS_PKEY;
    }

    @Override
    public List<ForeignKey<CoreUserJobsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_USER_JOBS__FK1_USER_JOBS_JOB_ID_JOBS_ID, Keys.CORE_USER_JOBS__FK2_USER_JOBS_USER_ID_USERS_ID);
    }

    private transient CoreJobsPath _coreJobs;

    /**
     * Get the implicit join path to the <code>core.core_jobs</code> table.
     */
    public CoreJobsPath coreJobs() {
        if (_coreJobs == null)
            _coreJobs = new CoreJobsPath(this, Keys.CORE_USER_JOBS__FK1_USER_JOBS_JOB_ID_JOBS_ID, null);

        return _coreJobs;
    }

    private transient CoreUsersPath _coreUsers;

    /**
     * Get the implicit join path to the <code>core.core_users</code> table.
     */
    public CoreUsersPath coreUsers() {
        if (_coreUsers == null)
            _coreUsers = new CoreUsersPath(this, Keys.CORE_USER_JOBS__FK2_USER_JOBS_USER_ID_USERS_ID, null);

        return _coreUsers;
    }

    @Override
    public CoreUserJobs as(String alias) {
        return new CoreUserJobs(DSL.name(alias), this);
    }

    @Override
    public CoreUserJobs as(Name alias) {
        return new CoreUserJobs(alias, this);
    }

    @Override
    public CoreUserJobs as(Table<?> alias) {
        return new CoreUserJobs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserJobs rename(String name) {
        return new CoreUserJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserJobs rename(Name name) {
        return new CoreUserJobs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUserJobs rename(Table<?> name) {
        return new CoreUserJobs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs where(Condition condition) {
        return new CoreUserJobs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserJobs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserJobs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserJobs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUserJobs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUserJobs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
