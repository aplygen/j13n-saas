/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq;


import io.j13n.core.jooq.tables.CoreAuthorities;
import io.j13n.core.jooq.tables.CoreFileSystem;
import io.j13n.core.jooq.tables.CoreUserAuthorities;
import io.j13n.core.jooq.tables.CoreUsers;
import io.j13n.core.jooq.tables.records.CoreAuthoritiesRecord;
import io.j13n.core.jooq.tables.records.CoreFileSystemRecord;
import io.j13n.core.jooq.tables.records.CoreUserAuthoritiesRecord;
import io.j13n.core.jooq.tables.records.CoreUsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * core.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CoreAuthoritiesRecord> CORE_AUTHORITIES_NAME_KEY = Internal.createUniqueKey(CoreAuthorities.CORE_AUTHORITIES, DSL.name("core_authorities_name_key"), new TableField[] { CoreAuthorities.CORE_AUTHORITIES.NAME }, true);
    public static final UniqueKey<CoreAuthoritiesRecord> CORE_AUTHORITIES_PKEY = Internal.createUniqueKey(CoreAuthorities.CORE_AUTHORITIES, DSL.name("core_authorities_pkey"), new TableField[] { CoreAuthorities.CORE_AUTHORITIES.ID }, true);
    public static final UniqueKey<CoreFileSystemRecord> CORE_FILE_SYSTEM_PKEY = Internal.createUniqueKey(CoreFileSystem.CORE_FILE_SYSTEM, DSL.name("core_file_system_pkey"), new TableField[] { CoreFileSystem.CORE_FILE_SYSTEM.ID }, true);
    public static final UniqueKey<CoreUserAuthoritiesRecord> CORE_USER_AUTHORITIES_PKEY = Internal.createUniqueKey(CoreUserAuthorities.CORE_USER_AUTHORITIES, DSL.name("core_user_authorities_pkey"), new TableField[] { CoreUserAuthorities.CORE_USER_AUTHORITIES.USER_ID, CoreUserAuthorities.CORE_USER_AUTHORITIES.AUTHORITY_ID }, true);
    public static final UniqueKey<CoreUsersRecord> CORE_USERS_EMAIL_ID_KEY = Internal.createUniqueKey(CoreUsers.CORE_USERS, DSL.name("core_users_email_id_key"), new TableField[] { CoreUsers.CORE_USERS.EMAIL_ID }, true);
    public static final UniqueKey<CoreUsersRecord> CORE_USERS_PKEY = Internal.createUniqueKey(CoreUsers.CORE_USERS, DSL.name("core_users_pkey"), new TableField[] { CoreUsers.CORE_USERS.ID }, true);
    public static final UniqueKey<CoreUsersRecord> CORE_USERS_USER_NAME_KEY = Internal.createUniqueKey(CoreUsers.CORE_USERS, DSL.name("core_users_user_name_key"), new TableField[] { CoreUsers.CORE_USERS.USER_NAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CoreFileSystemRecord, CoreFileSystemRecord> CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_PARENT_ID_FKEY = Internal.createForeignKey(CoreFileSystem.CORE_FILE_SYSTEM, DSL.name("core_file_system_parent_id_fkey"), new TableField[] { CoreFileSystem.CORE_FILE_SYSTEM.PARENT_ID }, Keys.CORE_FILE_SYSTEM_PKEY, new TableField[] { CoreFileSystem.CORE_FILE_SYSTEM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<CoreFileSystemRecord, CoreUsersRecord> CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_USER_ID_FKEY = Internal.createForeignKey(CoreFileSystem.CORE_FILE_SYSTEM, DSL.name("core_file_system_user_id_fkey"), new TableField[] { CoreFileSystem.CORE_FILE_SYSTEM.USER_ID }, Keys.CORE_USERS_PKEY, new TableField[] { CoreUsers.CORE_USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<CoreUserAuthoritiesRecord, CoreAuthoritiesRecord> CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_AUTHORITY_ID_FKEY = Internal.createForeignKey(CoreUserAuthorities.CORE_USER_AUTHORITIES, DSL.name("core_user_authorities_authority_id_fkey"), new TableField[] { CoreUserAuthorities.CORE_USER_AUTHORITIES.AUTHORITY_ID }, Keys.CORE_AUTHORITIES_PKEY, new TableField[] { CoreAuthorities.CORE_AUTHORITIES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<CoreUserAuthoritiesRecord, CoreUsersRecord> CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_USER_ID_FKEY = Internal.createForeignKey(CoreUserAuthorities.CORE_USER_AUTHORITIES, DSL.name("core_user_authorities_user_id_fkey"), new TableField[] { CoreUserAuthorities.CORE_USER_AUTHORITIES.USER_ID }, Keys.CORE_USERS_PKEY, new TableField[] { CoreUsers.CORE_USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
