/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.tables.records;


import io.j13n.core.jooq.tables.CoreUsers;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreUsersRecord extends UpdatableRecordImpl<CoreUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>core.core_users.id</code>.
     */
    public CoreUsersRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>core.core_users.username</code>.
     */
    public CoreUsersRecord setUsername(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>core.core_users.email</code>.
     */
    public CoreUsersRecord setEmail(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.email</code>.
     */
    public String getEmail() {
        return (String) get(2);
    }

    /**
     * Setter for <code>core.core_users.dial_code</code>.
     */
    public CoreUsersRecord setDialCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.dial_code</code>.
     */
    public String getDialCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>core.core_users.phone_number</code>.
     */
    public CoreUsersRecord setPhoneNumber(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.phone_number</code>.
     */
    public String getPhoneNumber() {
        return (String) get(4);
    }

    /**
     * Setter for <code>core.core_users.first_name</code>.
     */
    public CoreUsersRecord setFirstName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>core.core_users.last_name</code>.
     */
    public CoreUsersRecord setLastName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.last_name</code>.
     */
    public String getLastName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>core.core_users.middle_name</code>.
     */
    public CoreUsersRecord setMiddleName(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.middle_name</code>.
     */
    public String getMiddleName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>core.core_users.locale_code</code>.
     */
    public CoreUsersRecord setLocaleCode(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.locale_code</code>.
     */
    public String getLocaleCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>core.core_users.password</code>.
     */
    public CoreUsersRecord setPassword(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.password</code>.
     */
    public String getPassword() {
        return (String) get(9);
    }

    /**
     * Setter for <code>core.core_users.password_hashed</code>.
     */
    public CoreUsersRecord setPasswordHashed(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.password_hashed</code>.
     */
    public Boolean getPasswordHashed() {
        return (Boolean) get(10);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public CoreUsersRecord setUserStatusCode(Object value) {
        set(11, value);
        return this;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getUserStatusCode() {
        return get(11);
    }

    /**
     * Setter for <code>core.core_users.no_failed_attempt</code>.
     */
    public CoreUsersRecord setNoFailedAttempt(Short value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.no_failed_attempt</code>.
     */
    public Short getNoFailedAttempt() {
        return (Short) get(12);
    }

    /**
     * Setter for <code>core.core_users.created_at</code>.
     */
    public CoreUsersRecord setCreatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>core.core_users.updated_at</code>.
     */
    public CoreUsersRecord setUpdatedAt(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>core.core_users.created_by</code>.
     */
    public CoreUsersRecord setCreatedBy(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.created_by</code>.
     */
    public Long getCreatedBy() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>core.core_users.updated_by</code>.
     */
    public CoreUsersRecord setUpdatedBy(Long value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>core.core_users.updated_by</code>.
     */
    public Long getUpdatedBy() {
        return (Long) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreUsersRecord
     */
    public CoreUsersRecord() {
        super(CoreUsers.CORE_USERS);
    }

    /**
     * Create a detached, initialised CoreUsersRecord
     */
    public CoreUsersRecord(Long id, String username, String email, String dialCode, String phoneNumber, String firstName, String lastName, String middleName, String localeCode, String password, Boolean passwordHashed, Object userStatusCode, Short noFailedAttempt, LocalDateTime createdAt, LocalDateTime updatedAt, Long createdBy, Long updatedBy) {
        super(CoreUsers.CORE_USERS);

        setId(id);
        setUsername(username);
        setEmail(email);
        setDialCode(dialCode);
        setPhoneNumber(phoneNumber);
        setFirstName(firstName);
        setLastName(lastName);
        setMiddleName(middleName);
        setLocaleCode(localeCode);
        setPassword(password);
        setPasswordHashed(passwordHashed);
        setUserStatusCode(userStatusCode);
        setNoFailedAttempt(noFailedAttempt);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setCreatedBy(createdBy);
        setUpdatedBy(updatedBy);
        resetTouchedOnNotNull();
    }
}
