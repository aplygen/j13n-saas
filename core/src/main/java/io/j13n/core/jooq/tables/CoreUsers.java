/*
 * This file is generated by jOOQ.
 */
package io.j13n.core.jooq.tables;


import io.j13n.core.jooq.Core;
import io.j13n.core.jooq.Keys;
import io.j13n.core.jooq.tables.CoreAuthorities.CoreAuthoritiesPath;
import io.j13n.core.jooq.tables.CoreFileSystem.CoreFileSystemPath;
import io.j13n.core.jooq.tables.CoreUserAuthorities.CoreUserAuthoritiesPath;
import io.j13n.core.jooq.tables.records.CoreUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CoreUsers extends TableImpl<CoreUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_users</code>
     */
    public static final CoreUsers CORE_USERS = new CoreUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreUsersRecord> getRecordType() {
        return CoreUsersRecord.class;
    }

    /**
     * The column <code>core.core_users.id</code>.
     */
    public final TableField<CoreUsersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("core.next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.core_users.username</code>.
     */
    public final TableField<CoreUsersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CHAR(320).nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::bpchar"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>core.core_users.email</code>.
     */
    public final TableField<CoreUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(320).nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>core.core_users.dial_code</code>.
     */
    public final TableField<CoreUsersRecord, String> DIAL_CODE = createField(DSL.name("dial_code"), SQLDataType.CHAR(5).nullable(false).defaultValue(DSL.field(DSL.raw("'91'::bpchar"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>core.core_users.phone_number</code>.
     */
    public final TableField<CoreUsersRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CHAR(13).nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::bpchar"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>core.core_users.first_name</code>.
     */
    public final TableField<CoreUsersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.core_users.last_name</code>.
     */
    public final TableField<CoreUsersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.core_users.middle_name</code>.
     */
    public final TableField<CoreUsersRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.core_users.locale_code</code>.
     */
    public final TableField<CoreUsersRecord, String> LOCALE_CODE = createField(DSL.name("locale_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>core.core_users.password</code>.
     */
    public final TableField<CoreUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>core.core_users.password_hashed</code>.
     */
    public final TableField<CoreUsersRecord, Boolean> PASSWORD_HASHED = createField(DSL.name("password_hashed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CoreUsersRecord, Object> USER_STATUS_CODE = createField(DSL.name("user_status_code"), DefaultDataType.getDefaultDataType("\"public\".\"user_status_code\"").nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::user_status_code"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>core.core_users.no_failed_attempt</code>.
     */
    public final TableField<CoreUsersRecord, Short> NO_FAILED_ATTEMPT = createField(DSL.name("no_failed_attempt"), SQLDataType.SMALLINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>core.core_users.created_at</code>.
     */
    public final TableField<CoreUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_users.updated_at</code>.
     */
    public final TableField<CoreUsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>core.core_users.created_by</code>.
     */
    public final TableField<CoreUsersRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.core_users.updated_by</code>.
     */
    public final TableField<CoreUsersRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    private CoreUsers(Name alias, Table<CoreUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CoreUsers(Name alias, Table<CoreUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.core_users</code> table reference
     */
    public CoreUsers(String alias) {
        this(DSL.name(alias), CORE_USERS);
    }

    /**
     * Create an aliased <code>core.core_users</code> table reference
     */
    public CoreUsers(Name alias) {
        this(alias, CORE_USERS);
    }

    /**
     * Create a <code>core.core_users</code> table reference
     */
    public CoreUsers() {
        this(DSL.name("core_users"), null);
    }

    public <O extends Record> CoreUsers(Table<O> path, ForeignKey<O, CoreUsersRecord> childPath, InverseForeignKey<O, CoreUsersRecord> parentPath) {
        super(path, childPath, parentPath, CORE_USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoreUsersPath extends CoreUsers implements Path<CoreUsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoreUsersPath(Table<O> path, ForeignKey<O, CoreUsersRecord> childPath, InverseForeignKey<O, CoreUsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoreUsersPath(Name alias, Table<CoreUsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoreUsersPath as(String alias) {
            return new CoreUsersPath(DSL.name(alias), this);
        }

        @Override
        public CoreUsersPath as(Name alias) {
            return new CoreUsersPath(alias, this);
        }

        @Override
        public CoreUsersPath as(Table<?> alias) {
            return new CoreUsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public UniqueKey<CoreUsersRecord> getPrimaryKey() {
        return Keys.CORE_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<CoreUsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CORE_USERS_EMAIL_KEY, Keys.CORE_USERS_USERNAME_KEY);
    }

    private transient CoreFileSystemPath _coreFileSystem;

    /**
     * Get the implicit to-many join path to the
     * <code>core.core_file_system</code> table
     */
    public CoreFileSystemPath coreFileSystem() {
        if (_coreFileSystem == null)
            _coreFileSystem = new CoreFileSystemPath(this, null, Keys.CORE_FILE_SYSTEM__CORE_FILE_SYSTEM_USER_ID_FKEY.getInverseKey());

        return _coreFileSystem;
    }

    private transient CoreUserAuthoritiesPath _coreUserAuthorities;

    /**
     * Get the implicit to-many join path to the
     * <code>core.core_user_authorities</code> table
     */
    public CoreUserAuthoritiesPath coreUserAuthorities() {
        if (_coreUserAuthorities == null)
            _coreUserAuthorities = new CoreUserAuthoritiesPath(this, null, Keys.CORE_USER_AUTHORITIES__CORE_USER_AUTHORITIES_USER_ID_FKEY.getInverseKey());

        return _coreUserAuthorities;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>core.core_authorities</code> table
     */
    public CoreAuthoritiesPath coreAuthorities() {
        return coreUserAuthorities().coreAuthorities();
    }

    @Override
    public CoreUsers as(String alias) {
        return new CoreUsers(DSL.name(alias), this);
    }

    @Override
    public CoreUsers as(Name alias) {
        return new CoreUsers(alias, this);
    }

    @Override
    public CoreUsers as(Table<?> alias) {
        return new CoreUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUsers rename(String name) {
        return new CoreUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUsers rename(Name name) {
        return new CoreUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUsers rename(Table<?> name) {
        return new CoreUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers where(Condition condition) {
        return new CoreUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CoreUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CoreUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
